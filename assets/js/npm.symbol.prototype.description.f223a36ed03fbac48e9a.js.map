{"version":3,"sources":["webpack:///./node_modules/symbol.prototype.description/implementation.js","webpack:///./node_modules/symbol.prototype.description/shim.js","webpack:///./node_modules/symbol.prototype.description/helpers/getInferredName.js","webpack:///./node_modules/symbol.prototype.description/auto.js","webpack:///./node_modules/symbol.prototype.description/polyfill.js"],"names":["symToStr","__webpack_require__","Function","call","bind","Symbol","prototype","toString","getInferredName","module","exports","str","this","name","slice","desc","hasSymbols","polyfill","gOPD","Object","getOwnPropertyDescriptor","dP","defineProperty","setProto","setPrototypeOf","define","getter","configurable","enumerable","get","isMissing","isBroken","description","origSym","apply","emptyStrings","create","SymNew","sym","arguments","length","boundGetter","wrappedGetter","symbolDescription","shimGlobal","e","implementation"],"mappings":"4FAEA,IACAA,EADiBC,EAAQ,OAARA,GACjBC,SAAAC,KAAAC,KAAAC,OAAAC,UAAAC,UAAA,KACAC,EAAsBP,EAAQ,QAE9BQ,EAAAC,QAAA,WACA,IAAAC,EAAAX,EAAAY,MAEA,GAAAJ,EAAA,CACA,IAAAK,EAAAL,EAAAI,MACA,QAAAC,EAAoB,OACpB,OAAAA,EAAAC,MAAA,MAGA,IAAAC,EAAAJ,EAAAG,MAAA,MACA,GAAAC,EACA,OAAAA,wCCfA,IAAAC,EAAiBf,EAAQ,OAARA,GACjBgB,EAAehB,EAAQ,QACvBO,EAAsBP,EAAQ,QAE9BiB,EAAAC,OAAAC,yBACAC,EAAAF,OAAAG,eACAC,EAAAJ,OAAAK,eAEAC,EAAA,SAAAC,GACAL,EAAAhB,OAAAC,UAAA,eACAqB,cAAA,EACAC,YAAA,EACAC,IAAAH,KA+BAjB,EAAAC,QAAA,WACA,IAAAM,EACA,SAEA,IAAAD,EAAAG,EAAAb,OAAAC,UAAA,eACAoB,EAAAT,IACAa,GAAAf,GAAA,mBAAAA,EAAAc,IACAE,GAAAD,SAAA,IAAAzB,SAAA2B,aAAA,KAAA3B,OAAA,IAAA2B,aACA,GAAAF,GAAAC,EAAA,CACA,IAAAvB,EACA,OArCA,SAAAkB,GACA,IAAAO,EAAA/B,SAAAgC,MAAA9B,KAAAC,QACA8B,EAAAhB,OAAAiB,OAAAjB,OAAAiB,OAAA,SACAC,EAAA,WACA,IAAAC,EAAAL,EAAArB,KAAA2B,WAIA,OAHAA,UAAAC,OAAA,QAAAD,UAAA,KACAJ,EAAAG,IAAA,GAEAA,GAEAD,EAAA/B,UAAAD,OAAAC,UACAiB,EAAAc,EAAAhC,QACAA,OAAAgC,EAEA,IAAAI,EAAAvC,SAAAC,KAAAC,KAAAsB,GACAgB,EAAA,WAEA,IAAAC,EAAAF,EAAA7B,MACA,OAAAuB,EAAAvB,MACA,GAEA+B,GAGA,OADAlB,EAAAiB,GACAA,EAaAE,CAAAlB,GAEAD,EAAAC,GAEA,OAAAA,sCCzDA,IAAAlB,EACA,IAEAA,EAAAN,SAAA,oCACC,MAAA2C,IAGDpC,EAAAC,QAAAF,GAAA,aADA,aACAK,KAAAL,EAAA,wCCPAP,EAAQ,OAARA,sCCAA,IAAAe,EAAiBf,EAAQ,OAARA,GAEjB6C,EAAqB7C,EAAQ,QAC7BiB,EAAAC,OAAAC,yBAEAX,EAAAC,QAAA,WACA,IAAAM,GAAA,mBAAAE,EACA,YAEA,IAAAH,EAAAG,EAAAb,OAAAC,UAAA,eACA,OAAAS,GAAA,mBAAAA,EAAAc,SAGA,IAAAd,EAAAc,IAAA1B,KAAAE,WAAA,KAAAU,EAAAc,IAAA1B,KAAAE,WAAA,MAAAU,EAAAc,IAAA1B,KAAAE,OAAA,MACAyC,EAEA/B,EAAAc,IALAiB","file":"assets/js/npm.symbol.prototype.description.f223a36ed03fbac48e9a.js","sourcesContent":["'use strict';\n\nvar hasSymbols = require('has-symbols')();\nvar symToStr = hasSymbols ? Function.call.bind(Symbol.prototype.toString) : null;\nvar getInferredName = require('./helpers/getInferredName');\n\nmodule.exports = function description() {\n\tvar str = symToStr(this); // will throw if not a Symbol\n\n\tif (getInferredName) {\n\t\tvar name = getInferredName(this);\n\t\tif (name === '') { return; }\n\t\treturn name.slice(1, -1); // name.slice('['.length, -']'.length);\n\t}\n\n\tvar desc = str.slice(7, -1); // str.slice('Symbol('.length, -')'.length);\n\tif (desc) {\n\t\treturn desc;\n\t}\n};\n","'use strict';\n\nvar hasSymbols = require('has-symbols')();\nvar polyfill = require('./polyfill');\nvar getInferredName = require('./helpers/getInferredName');\n\nvar gOPD = Object.getOwnPropertyDescriptor;\nvar dP = Object.defineProperty;\nvar setProto = Object.setPrototypeOf;\n\nvar define = function defineGetter(getter) {\n\tdP(Symbol.prototype, 'description', {\n\t\tconfigurable: true,\n\t\tenumerable: false,\n\t\tget: getter\n\t});\n};\n\nvar shimGlobal = function shimGlobalSymbol(getter) {\n\tvar origSym = Function.apply.bind(Symbol);\n\tvar emptyStrings = Object.create ? Object.create(null) : {};\n\tvar SymNew = function Symbol() {\n\t\tvar sym = origSym(this, arguments);\n\t\tif (arguments.length > 0 && arguments[0] === '') {\n\t\t\temptyStrings[sym] = true;\n\t\t}\n\t\treturn sym;\n\t};\n\tSymNew.prototype = Symbol.prototype;\n\tsetProto(SymNew, Symbol);\n\tSymbol = SymNew; // eslint-disable-line no-native-reassign, no-global-assign\n\n\tvar boundGetter = Function.call.bind(getter);\n\tvar wrappedGetter = function description() {\n\t\t/* eslint no-invalid-this: 0 */\n\t\tvar symbolDescription = boundGetter(this);\n\t\tif (emptyStrings[this]) {\n\t\t\treturn '';\n\t\t}\n\t\treturn symbolDescription;\n\t};\n\tdefine(wrappedGetter);\n\treturn wrappedGetter;\n};\n\nmodule.exports = function shimSymbolDescription() {\n\tif (!hasSymbols) {\n\t\treturn false;\n\t}\n\tvar desc = gOPD(Symbol.prototype, 'description');\n\tvar getter = polyfill();\n\tvar isMissing = !desc || typeof desc.get !== 'function';\n\tvar isBroken = !isMissing && (typeof Symbol().description !== 'undefined' || Symbol('').description !== '');\n\tif (isMissing || isBroken) {\n\t\tif (!getInferredName) {\n\t\t\treturn shimGlobal(getter);\n\t\t}\n\t\tdefine(getter);\n\t}\n\treturn getter;\n};\n","'use strict';\n\nvar getInferredName;\ntry {\n\t// eslint-disable-next-line no-new-func\n\tgetInferredName = Function('s', 'return { [s]() {} }[s].name;');\n} catch (e) {}\n\nvar inferred = function () {};\nmodule.exports = getInferredName && inferred.name === 'inferred' ? getInferredName : null;\n\n","'use strict';\n\nrequire('./shim')();\n","'use strict';\n\nvar hasSymbols = require('has-symbols')();\n\nvar implementation = require('./implementation');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nmodule.exports = function descriptionPolyfill() {\n\tif (!hasSymbols || typeof gOPD !== 'function') {\n\t\treturn null;\n\t}\n\tvar desc = gOPD(Symbol.prototype, 'description');\n\tif (!desc || typeof desc.get !== 'function') {\n\t\treturn implementation;\n\t}\n\tif (typeof desc.get.call(Symbol()) !== 'undefined' || desc.get.call(Symbol()) !== '' || desc.get.call(Symbol('a')) !== 'a') {\n\t\treturn implementation;\n\t}\n\treturn desc.get;\n};\n"],"sourceRoot":""}