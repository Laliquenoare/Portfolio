{"version":3,"sources":["webpack:///./node_modules/function.prototype.name/helpers/functionsHaveNames.js","webpack:///./node_modules/function.prototype.name/shim.js","webpack:///./node_modules/function.prototype.name/polyfill.js","webpack:///./node_modules/function.prototype.name/implementation.js"],"names":["module","exports","name","supportsDescriptors","__webpack_require__","functionsHaveNames","getPolyfill","defineProperty","Object","TypeErr","TypeError","polyfill","functionProto","Function","prototype","configurable","enumerable","get","call","this","value","writable","implementation","isCallable","bind","functionToString","toString","stringMatch","String","match","classRegex","regex","fn","e","isClass","str"],"mappings":"6EAAAA,EAAAC,QAAyC,iBAAzC,aAAyCC,wCCEzC,IAAAC,EAA0BC,EAAQ,QAAmBD,oBACrDE,EAAyBD,EAAQ,QACjCE,EAAkBF,EAAQ,QAC1BG,EAAAC,OAAAD,eACAE,EAAAC,UAEAV,EAAAC,QAAA,WACA,IAAAU,EAAAL,IACA,GAAAD,EACA,OAAAM,EAEA,IAAAR,EACA,UAAAM,EAAA,sFAEA,IAAAG,EAAAC,SAAAC,UAiBA,OAhBAP,EAAAK,EAAA,QACAG,cAAA,EACAC,YAAA,EACAC,IAAA,WACA,IAAAf,EAAAS,EAAAO,KAAAC,MASA,OARAA,OAAAP,GACAL,EAAAY,KAAA,QACAJ,cAAA,EACAC,YAAA,EACAI,MAAAlB,EACAmB,UAAA,IAGAnB,KAGAS,sCC/BA,IAAAW,EAAqBlB,EAAQ,QAE7BJ,EAAAC,QAAA,WACA,OAAAqB,sCCHA,IAAAC,EAAiBnB,EAAQ,QACzBC,EAAyBD,EAAQ,QACjCoB,EAAWpB,EAAQ,QACnBqB,EAAAD,EAAAN,KAAAL,SAAAK,KAAAL,SAAAC,UAAAY,UACAC,EAAAH,EAAAN,KAAAL,SAAAK,KAAAU,OAAAd,UAAAe,OAEAC,EAAA,UAgBAC,EAAA,6BAEAnB,EAAAC,SAAAC,UAEAd,EAAAC,QAAA,WACA,IAnBA,SAAA+B,GACA,GAAAT,EAAAS,GACA,SAEA,sBAAAA,EACA,SAEA,IAEA,QADAL,EAAAF,EAAAO,GAAAF,GAEE,MAAAG,IACF,SAQAC,CAAAf,QAAAI,EAAAJ,MACA,UAAAT,UAAA,8DAEA,GAAAL,EACA,OAAAc,KAAAjB,KAEA,GAAAiB,OAAAP,EACA,SAEA,IAAAuB,EAAAV,EAAAN,MACAU,EAAAF,EAAAQ,EAAAJ,GAEA,OADAF,KAAA","file":"assets/js/npm.function.prototype.name.f223a36ed03fbac48e9a.js","sourcesContent":["module.exports = typeof function foo() {}.name === 'string'; // when function names are minified, checking for \"foo\" would break\n","'use strict';\n\nvar supportsDescriptors = require('define-properties').supportsDescriptors;\nvar functionsHaveNames = require('./helpers/functionsHaveNames');\nvar getPolyfill = require('./polyfill');\nvar defineProperty = Object.defineProperty;\nvar TypeErr = TypeError;\n\nmodule.exports = function shimName() {\n\tvar polyfill = getPolyfill();\n\tif (functionsHaveNames) {\n\t\treturn polyfill;\n\t}\n\tif (!supportsDescriptors) {\n\t\tthrow new TypeErr('Shimming Function.prototype.name support requires ES5 property descriptor support.');\n\t}\n\tvar functionProto = Function.prototype;\n\tdefineProperty(functionProto, 'name', {\n\t\tconfigurable: true,\n\t\tenumerable: false,\n\t\tget: function () {\n\t\t\tvar name = polyfill.call(this);\n\t\t\tif (this !== functionProto) {\n\t\t\t\tdefineProperty(this, 'name', {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: name,\n\t\t\t\t\twritable: false\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t});\n\treturn polyfill;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\treturn implementation;\n};\n","'use strict';\n\nvar isCallable = require('is-callable');\nvar functionsHaveNames = require('./helpers/functionsHaveNames');\nvar bind = require('function-bind');\nvar functionToString = bind.call(Function.call, Function.prototype.toString);\nvar stringMatch = bind.call(Function.call, String.prototype.match);\n\nvar classRegex = /^class /;\n\nvar isClass = function isClassConstructor(fn) {\n\tif (isCallable(fn)) {\n\t\treturn false;\n\t}\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\ttry {\n\t\tvar match = stringMatch(functionToString(fn), classRegex);\n\t\treturn !!match;\n\t} catch (e) {}\n\treturn false;\n};\n\nvar regex = /\\s*function\\s+([^(\\s]*)\\s*/;\n\nvar functionProto = Function.prototype;\n\nmodule.exports = function getName() {\n\tif (!isClass(this) && !isCallable(this)) {\n\t\tthrow new TypeError('Function.prototype.name sham getter called on non-function');\n\t}\n\tif (functionsHaveNames) {\n\t\treturn this.name;\n\t}\n\tif (this === functionProto) {\n\t\treturn '';\n\t}\n\tvar str = functionToString(this);\n\tvar match = stringMatch(str, regex);\n\tvar name = match && match[1];\n\treturn name;\n};\n"],"sourceRoot":""}