{"version":3,"sources":["webpack:///./node_modules/array.prototype.flat/polyfill.js","webpack:///./node_modules/array.prototype.flat/shim.js","webpack:///./node_modules/array.prototype.flat/auto.js","webpack:///./node_modules/array.prototype.flat/implementation.js"],"names":["implementation","__webpack_require__","module","exports","Array","prototype","flat","define","getPolyfill","polyfill","ES","MAX_SAFE_INTEGER","Number","Math","pow","O","ToObject","this","sourceLen","ToLength","Get","depthNum","arguments","length","ToInteger","A","ArraySpeciesCreate","FlattenIntoArray","target","source","start","depth","targetIndex","sourceIndex","P","ToString","HasProperty","element","shouldFlatten","IsArray","TypeError","CreateDataPropertyOrThrow"],"mappings":"6FAEA,IAAAA,EAAqBC,EAAQ,QAE7BC,EAAAC,QAAA,WACA,OAAAC,MAAAC,UAAAC,MAAAN,sCCHA,IAAAO,EAAaN,EAAQ,QACrBO,EAAkBP,EAAQ,QAE1BC,EAAAC,QAAA,WACA,IAAAM,EAAAD,IAMA,OALAD,EACAH,MAAAC,UACA,CAAGC,KAAAG,GACH,CAAGH,KAAA,WAAoB,OAAAF,MAAAC,UAAAC,OAAAG,KAEvBA,sCCVAR,EAAQ,OAARA,sCCAA,IAAAS,EAAST,EAAQ,QAEjBU,EAAAC,OAAAD,kBAAAE,KAAAC,IAAA,QAgDAZ,EAAAC,QAAA,WACA,IAAAY,EAAAL,EAAAM,SAAAC,MACAC,EAAAR,EAAAS,SAAAT,EAAAU,IAAAL,EAAA,WAEAM,EAAA,EACAC,UAAAC,OAAA,YAAAD,UAAA,KACAD,EAAAX,EAAAc,UAAAF,UAAA,KAGA,IAAAG,EAAAf,EAAAgB,mBAAAX,EAAA,GAEA,OAxDA,SAAAY,EAAAC,EAAAC,EAAAX,EAAAY,EAAAC,GAWA,IAVA,IAAAC,EAAAF,EACAG,EAAA,EASAA,EAAAf,GAAA,CACA,IAAAgB,EAAAxB,EAAAyB,SAAAF,GAEA,GADAvB,EAAA0B,YAAAP,EAAAK,GACA,CACA,IAAAG,EAAA3B,EAAAU,IAAAS,EAAAK,GASAI,GAAA,EAIA,GAHAP,EAAA,IACAO,EAAA5B,EAAA6B,QAAAF,IAEAC,EAEAN,EAAAL,EAAAC,EAAAS,EADA3B,EAAAS,SAAAT,EAAAU,IAAAiB,EAAA,WACAL,EAAAD,EAAA,OACI,CACJ,GAAAC,GAAArB,EACA,UAAA6B,UAAA,mBAEA9B,EAAA+B,0BAAAb,EAAAlB,EAAAyB,SAAAH,GAAAK,GACAL,GAAA,GAGAC,GAAA,EAGA,OAAAD,EAaAL,CAAAF,EAAAV,EAAAG,EAAA,EAAAG,GACAI","file":"assets/js/npm.array.prototype.flat.f223a36ed03fbac48e9a.js","sourcesContent":["'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\treturn Array.prototype.flat || implementation;\n};\n","'use strict';\n\nvar define = require('define-properties');\nvar getPolyfill = require('./polyfill');\n\nmodule.exports = function shimFlat() {\n\tvar polyfill = getPolyfill();\n\tdefine(\n\t\tArray.prototype,\n\t\t{ flat: polyfill },\n\t\t{ flat: function () { return Array.prototype.flat !== polyfill; } }\n\t);\n\treturn polyfill;\n};\n","'use strict';\n\nrequire('./shim')();\n","'use strict';\n\nvar ES = require('es-abstract/es2017');\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (Math.pow(2, 53) - 1);\n\n// eslint-disable-next-line max-params, max-statements\nvar FlattenIntoArray = function FlattenIntoArray(target, source, sourceLen, start, depth) {\n\tvar targetIndex = start;\n\tvar sourceIndex = 0;\n\n\t/*\n\tvar mapperFunction;\n\tif (arguments.length > 5) {\n\t\tmapperFunction = arguments[5];\n\t}\n\t*/\n\n\twhile (sourceIndex < sourceLen) {\n\t\tvar P = ES.ToString(sourceIndex);\n\t\tvar exists = ES.HasProperty(source, P);\n\t\tif (exists) {\n\t\t\tvar element = ES.Get(source, P);\n\t\t\t/*\n\t\t\tif (typeof mapperFunction !== 'undefined') {\n\t\t\t\tif (arguments.length <= 6) {\n\t\t\t\t\tthrow new TypeError('Assertion failed: thisArg is required when mapperFunction is provided');\n\t\t\t\t}\n\t\t\t\telement = ES.Call(mapperFunction, arguments[6], [element, sourceIndex, source]);\n\t\t\t}\n\t\t\t*/\n\t\t\tvar shouldFlatten = false;\n\t\t\tif (depth > 0) {\n\t\t\t\tshouldFlatten = ES.IsArray(element);\n\t\t\t}\n\t\t\tif (shouldFlatten) {\n\t\t\t\tvar elementLen = ES.ToLength(ES.Get(element, 'length'));\n\t\t\t\ttargetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);\n\t\t\t} else {\n\t\t\t\tif (targetIndex >= MAX_SAFE_INTEGER) {\n\t\t\t\t\tthrow new TypeError('index too large');\n\t\t\t\t}\n\t\t\t\tES.CreateDataPropertyOrThrow(target, ES.ToString(targetIndex), element);\n\t\t\t\ttargetIndex += 1;\n\t\t\t}\n\t\t}\n\t\tsourceIndex += 1;\n\t}\n\n\treturn targetIndex;\n};\n\nmodule.exports = function flat() {\n\tvar O = ES.ToObject(this);\n\tvar sourceLen = ES.ToLength(ES.Get(O, 'length'));\n\n\tvar depthNum = 1;\n\tif (arguments.length > 0 && typeof arguments[0] !== 'undefined') {\n\t\tdepthNum = ES.ToInteger(arguments[0]);\n\t}\n\n\tvar A = ES.ArraySpeciesCreate(O, 0);\n\tFlattenIntoArray(A, O, sourceLen, 0, depthNum);\n\treturn A;\n};\n"],"sourceRoot":""}