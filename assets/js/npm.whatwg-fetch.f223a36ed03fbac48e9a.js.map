{"version":3,"sources":["webpack:///./node_modules/whatwg-fetch/fetch.js"],"names":["self","fetch","Headers","prototype","append","name","value","normalizeName","normalizeValue","list","this","map","push","get","values","getAll","has","hasOwnProperty","set","forEach","callback","thisArg","Object","getOwnPropertyNames","call","support","blob","Blob","e","formData","arrayBuffer","methods","Request","clone","Body","Response","_bodyInit","status","statusText","headers","url","error","response","type","redirectStatuses","redirect","indexOf","RangeError","location","input","init","Promise","resolve","reject","request","isPrototypeOf","xhr","XMLHttpRequest","onload","TypeError","options","responseURL","test","getAllResponseHeaders","getResponseHeader","body","responseText","onerror","ontimeout","open","method","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","String","toLowerCase","consumed","bodyUsed","fileReaderReady","reader","result","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","ArrayBuffer","Error","rejected","then","text","readAsText","decode","json","JSON","parse","upcased","mode","toUpperCase","referrer","form","trim","split","bytes","shift","replace","join","decodeURIComponent","head","header","key","bodyInit","ok"],"mappings":"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","file":"assets/js/npm.whatwg-fetch.f223a36ed03fbac48e9a.js","sourcesContent":["(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var status = (xhr.status === 1223) ? 204 : xhr.status\n        if (status < 100 || status > 599) {\n          reject(new TypeError('Network request failed'))\n          return\n        }\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n"],"sourceRoot":""}