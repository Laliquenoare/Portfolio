{"version":3,"sources":["webpack:///./node_modules/function-bind/index.js","webpack:///./node_modules/function-bind/implementation.js"],"names":["implementation","__webpack_require__","module","exports","Function","prototype","bind","slice","Array","toStr","Object","toString","that","target","this","call","TypeError","bound","args","arguments","boundLength","Math","max","length","boundArgs","i","push","join","result","apply","concat","Empty"],"mappings":"4FAEA,IAAAA,EAAqBC,EAAQ,QAE7BC,EAAAC,QAAAC,SAAAC,UAAAC,MAAAN,qCCAA,IACAO,EAAAC,MAAAH,UAAAE,MACAE,EAAAC,OAAAL,UAAAM,SAGAT,EAAAC,QAAA,SAAAS,GACA,IAAAC,EAAAC,KACA,sBAAAD,GAJA,sBAIAJ,EAAAM,KAAAF,GACA,UAAAG,UARA,kDAQAH,GAyBA,IAvBA,IAEAI,EAFAC,EAAAX,EAAAQ,KAAAI,UAAA,GAqBAC,EAAAC,KAAAC,IAAA,EAAAT,EAAAU,OAAAL,EAAAK,QACAC,EAAA,GACAC,EAAA,EAAmBA,EAAAL,EAAiBK,IACpCD,EAAAE,KAAA,IAAAD,GAKA,GAFAR,EAAAb,SAAA,6BAAAoB,EAAAG,KAAA,iDAAAvB,CAxBA,WACA,GAAAU,gBAAAG,EAAA,CACA,IAAAW,EAAAf,EAAAgB,MACAf,KACAI,EAAAY,OAAAvB,EAAAQ,KAAAI,aAEA,OAAAT,OAAAkB,OACAA,EAEAd,KAEA,OAAAD,EAAAgB,MACAjB,EACAM,EAAAY,OAAAvB,EAAAQ,KAAAI,eAaAN,EAAAR,UAAA,CACA,IAAA0B,EAAA,aACAA,EAAA1B,UAAAQ,EAAAR,UACAY,EAAAZ,UAAA,IAAA0B,EACAA,EAAA1B,UAAA,KAGA,OAAAY","file":"assets/js/npm.function-bind.f223a36ed03fbac48e9a.js","sourcesContent":["'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n"],"sourceRoot":""}